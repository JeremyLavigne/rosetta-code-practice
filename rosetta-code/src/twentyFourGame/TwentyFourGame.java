package twentyFourGame;

import java.util.ArrayList;
import java.util.Random;

/*
 
  	The 24 Game tests a person's mental arithmetic.

	The aim of the game is to arrange four numbers in a way that when evaluated, the result is 24
	
	
	A program that randomly chooses and displays four digits, each from 1 ──► 9 (inclusive) with repetitions allowed.

	The player has to enter an arithmetic expression using just those, and all of those four digits, used exactly once each. 
	The goal is for the player to enter an expression that (numerically) evaluates to 24.

	
	 - Only the following operators/functions are allowed: multiplication, division, addition, subtraction
	 - Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).
	 - The order of the digits when given does not have to be preserved.



 	Task
	Write a program that takes four digits, either from user input or by random generation, and computes arithmetic expressions following the rules of the 24 game.

	Show examples of solutions generated by the program.
	
 */

public class TwentyFourGame {
	
	// Tried (hard), but not succeed. Probably wrong way to consider the problem.
	
	// Ideas : Build a String ("3*2+1-6") using an array of char (pattern with n for number end o for operator : "nononon")
	// Transform String into a regular expression and verify the result
	// Permute numbers, permute operators, and verify each time

	public static void solveProblem() {
		
		ArrayList<Integer> digits = generateDigitsRandomly();
		
		String answer = findExpression(digits);
		
		System.out.println("With those digits : (" + digits.get(0) + ", " + digits.get(1) + ", " + digits.get(2) + ", " + digits.get(3) + ") : " 
							+ (answer.equals("") ? "there is no solution" : ("one solution is " + answer)));
		
		System.out.println("\n\n24game problem not solved :(");
		
	}


	private static ArrayList<Integer> generateDigitsRandomly() {
		ArrayList<Integer> digits = new ArrayList<>();
		
		for (int i = 0; i < 4; i++) {
			
			digits.add(new Random().nextInt(9) + 1);
			
		}
		
		return digits;
	}
	
	private static String findExpression(ArrayList<Integer> digits) {
		String answer = "";
		
		//  Let's consider how many "solution pattern" exist with 4 digits (do not take care about order now) and 4 operators
		//  Remove impossible cases and add alternatives with ()

		
		//  1  -> + + +  ;
		//  2  -> + + -  ;
		//  3  -> + + x  ; ( + + ) x ; ( + ) x + ;
		//  4  -> + + /  ; ( + + ) / ; ( + ) / + ;
		//  5  -> + - /  ; ( + - ) / ; ( + ) / - ; ( - ) / + ; ( - ) / ( + ) ; ( + ) / ( - )
		//  6  -> + - x  ; ( + - ) x ; ( + ) x - ; ( - ) x + ; ( - ) x ( + )
		//  7  -> + - -  ; 													impossible 9+9-1-1 < 24
		//  8  -> + x x  ; ( + ) x x ; ( + x ) x ; (( + ) x ) x
		//  9  -> + x /  ; ( + ) x / ; ( + x ) / ; ( + / ) x ;
		//  10 -> + / /  ; 													impossible 9/1/1+9 < 24
		//  11 -> - - -  ; 													impossible 9-1-1-1 < 24
		//  12 -> - - /  ; 													impossible 9/1-1-1 < 24
		//  13 -> - - x  ; ( - ) - x ; ( - - ) x ; ( - ) x - ;
		//  14 -> - x x  ; ( - ) x x ; ( - x ) x ;
		//  15 -> - x /  ; ( - ) x / ; ( - x ) / ; ( - / ) x ;
		//  16 -> - / /  ; 													impossible 9/1/1-1 < 24
		//  17 -> x x x  ;
		//  18 -> x x /  ;
		//  19 -> x / /  ;
		//  20 -> / / /  ; 													impossible 9/1/1/1 < 24
		
		
		// 14 patterns (?)
		// Obviously not the good way to do things without forget one..
		
		
		// Treat every case until find a solution. When found, return immediately the answer
		int i = 1;
		
		while (answer.equals("") && i <= 14) {
			
			switch (i) {
			
				case 1: answer = pattern1(digits); break;
				case 2: answer = pattern2(digits); break;
				/*case 3: answer = pattern3(digits); break;
				case 4: answer = pattern4(digits); break;
				case 5: answer = pattern5(digits); break;
				case 6: answer = pattern6(digits); break;
				case 7: answer = pattern7(digits); break;
				case 8: answer = pattern8(digits); break;
				case 9: answer = pattern9(digits); break;
				case 10: answer = pattern10(digits); break;
				case 11: answer = pattern11(digits); break;
				case 12: answer = pattern12(digits); break;
				case 13: answer = pattern13(digits); break;
				case 14: answer = pattern14(digits); break;	*/
				
			}
			
			i ++;
		}
		
		return answer;
	}


	private static String pattern1(ArrayList<Integer> digits) {
	//  1  -> + + +  ;
		
		if (digits.stream().reduce(0, (p,s) -> s += p) == 24) {
			
			return digits.get(0) + "+" + digits.get(1) + "+" + digits.get(2) + "+" + digits.get(3) + " = 24";
			
		}
		
		return "";
	}
	
	private static String pattern2(ArrayList<Integer> digits) {
	//  2  -> + + -  ;
	
		ArrayList<ArrayList<Integer>> permutations = permute(digits);
		
		//System.out.println(permutations);
		
		for (int i = 0 ; i < 24 ; i ++) {
		
			digits = permutations.get(i);
			
			if (digits.get(0) + digits.get(1) + digits.get(2) - digits.get(3) == 24) {
				
				return digits.get(0) + "+" + digits.get(1) + "+" + digits.get(2) + "-" + digits.get(3) + " = 24";
				
			}
			
		}
		
		return "";
	}


	
	// -------------------------------------------------------------------------------------------------------------
	// Google help with the permute method, hard to find it by myself 
	// Source : https://java2blog.com/permutations-array-java/
	
	public static ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> digits) {
		
		int[] arr = new int[4];
		arr[0] = digits.get(0);
		arr[1] = digits.get(1);
		arr[2] = digits.get(2);
		arr[3] = digits.get(3);
		
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		
		permuteHelper(list, new ArrayList<>(), arr);
		
		return list;
	}
	
	private static void permuteHelper(ArrayList<ArrayList<Integer>> list, ArrayList<Integer> resultList, int [] arr){
		 
		// Base case
		if(resultList.size() == arr.length){
			
			list.add(new ArrayList<>(resultList));
			
		} 
		else{
			for(int i = 0; i < arr.length; i++){ 
 
				if(resultList.contains(arr[i])) 
				{
					// If element already exists in the list then skip
					continue; 
				}
				// Choose element
				resultList.add(arr[i]);
				// Explore
				permuteHelper(list, resultList, arr);
				// Unchoose element
				resultList.remove(resultList.size() - 1);
			}
		}
	} 

	
}
